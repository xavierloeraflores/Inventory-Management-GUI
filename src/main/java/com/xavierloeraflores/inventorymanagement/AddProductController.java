package com.xavierloeraflores.inventorymanagement;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.stage.Modality;
import javafx.stage.Stage;

import java.io.IOException;
import java.net.URL;
import java.util.Objects;
import java.util.Optional;
import java.util.ResourceBundle;

/**
 * Controller class for the AddProduct.fmxl form.
 * Implements Initializable
 * @author xavierloeraflores
 */
public class AddProductController implements Initializable {


    /**
     * The [fieldID] which displays the id for the Part .
     */
    @FXML
    private TextField fieldId;
    /**
     * The [fieldName] takes in input from the user for the partName.
     */
    @FXML
    private TextField fieldName;
    /**
     * The [fieldStock] takes in input from the user for the Part inventory or partStock.
     */
    @FXML
    private TextField fieldStock;
    /**
     * The [fieldPrice] takes in input from the user for the partPrice.
     */
    @FXML
    private TextField fieldPrice;
    /**
     * The [fieldMin] takes in input from the user for the partMin.
     */
    @FXML
    private TextField fieldMin;
    /**
     * The [fieldMax] takes in input from the user for the partMax.
     */
    @FXML
    private TextField fieldMax;
    /**
     * The [fieldSearch] takes in input from the user for searching for parts.
     */
    @FXML
    private TextField fieldSearch;
    /**
     * The [tableInventoryPart] which displays Inventory Parts.
     */
    @FXML
    private TableView<Part>  tableInventoryPart;
    /**
     * The [columnInventoryId] which displays Inventory Parts' Id.
     */
    @FXML
    private TableColumn<Part, Integer> columnInventoryPartId;
    /**
     * The [columnInventoryName] which displays Inventory Parts' Name.
     */
    @FXML
    private TableColumn<Part, String> columnInventoryPartName;
    /**
     * The [columnInventoryStock] which displays Inventory Parts' Stock.
     */
    @FXML
    private TableColumn<Part, Integer> columnInventoryPartStock;
    /**
     * The [columnInventoryPrice] which displays Inventory Parts' Price.
     */
    @FXML
    private TableColumn<Part, Double> columnInventoryPartPrice;

    /**
     * The [TableAssociated] which displays Associated Parts.
     */
    @FXML
    private TableView<Part>  tableAssociatedPart;
    /**
     * The [columnAssociatedId] which displays Associated Parts' Id.
     */
    @FXML
    private TableColumn<Part, Integer> columnAssociatedPartId;
    /**
     * The [columnAssociatedName] which displays Associated Parts' Name.
     */
    @FXML
    private TableColumn<Part, String> columnAssociatedPartName;
    /**
     * The [columnAssociatedStock] which displays Associated Parts' Stock.
     */
    @FXML
    private TableColumn<Part, Integer> columnAssociatedPartStock;
    /**
     * The [columnAssociatedPrice] which displays Associated Parts' Price.
     */
    @FXML
    private TableColumn<Part, Double> columnAssociatedPartPrice;

    /**
     * The [errorMessage] which will be displayed in case of an error when validating.
     */
    private String errorMessage;
    /**
     * The autogenerated [productId] of the Product to be added.
     */
    private int productId;
    /**
     * The [newProduct] to be added to the inventory.
     */
    private Product newProduct;


    /**
     * Returns the user back to the main screen.
     * @param actionEvent JavaFX action event
     * @throws IOException
     */
    private void mainScreen(ActionEvent actionEvent) throws IOException{
        Parent mainFXML = FXMLLoader.load(getClass().getResource("Main.fxml"));
        Scene mainScene = new Scene(mainFXML);
        Stage stage = (Stage) ((Node) actionEvent.getSource()).getScene().getWindow();
        stage.setTitle("Inventory Management System");
        stage.setScene(mainScene);
        stage.show();
    }


    /**
     * Validates whether the inputs the user has provided are valid for creating a new product.
     * RUNTIME ERROR: errorMessage was not updating with the concat function.
     * @param name [String] name value from the name field
     * @param priceString [String] price value from the price field
     * @param stockString [String] stock value from the inventory/stock field
     * @param minString [String] min value from the min field
     * @param maxString [String] max value from the max field
     * @return [Boolean] true if the inputs are valid, false if any of the inputs are not valid
     */
    private boolean validate(String name,  String priceString, String stockString, String minString, String maxString){
        boolean validated = true;
        errorMessage = "";

        if(Objects.equals(name, "")){
            validated = false;
            errorMessage=errorMessage.concat("\nName field can not be empty.");
        }
        if(Objects.equals(priceString, "")){
            validated = false;
            errorMessage=errorMessage.concat("\n Price field can not be empty.");
        }
        if(Objects.equals(stockString, "")){
            validated = false;
            errorMessage=errorMessage.concat("\n Stock field can not be empty.");
        }
        if(Objects.equals(minString, "")){
            validated = false;
            errorMessage=errorMessage.concat("\n Min field can not be empty.");
        }
        if(Objects.equals(maxString, "")){
            validated = false;
            errorMessage=errorMessage.concat("\n Max field can not be empty.");
        }
        if(!validated){return false;}

        int stock =0;
        int min =0;
        int max=0;
        double price=0.0;
        int specialInt=0;


        try{

            try {stock= Integer.parseInt(stockString);}
            catch (NumberFormatException e){
                validated = false;
                errorMessage=errorMessage.concat("\n Part must have an valid stock integer value");
            }

            try {min = Integer.parseInt(minString);}
            catch (NumberFormatException e){
                validated = false;
                errorMessage=errorMessage.concat("\n Part must have an valid integer value");
            }

            try {max= Integer.parseInt(maxString);}
            catch (NumberFormatException e){
                validated = false;
                errorMessage=errorMessage.concat("\n Part must have an valid Max integer value ");
            }

            try {price= Double.parseDouble(priceString);}
            catch (NumberFormatException e){
                validated = false;
                errorMessage=errorMessage.concat("\n Part must have an valid Price double value ");
            }


        }catch (Exception e){
            return false;
        }




        if (stock < 0){
            validated = false;
            errorMessage=errorMessage.concat("\n Stock can not be negative.");
        }
        if (stock < min){
            validated = false;
            errorMessage=errorMessage.concat("\nStock must be within range of min & max \n Stock can not be less than min.");
        }
        if (stock > max){
            validated = false;
            errorMessage=errorMessage.concat("\nStock must be within range of min & max \n Stock can not be more than max.");
        }

        if(max < min){
            validated = false;
            errorMessage=errorMessage.concat("\n Max can not be less than min.");
        }
        if(min < 0){
            validated = false;
            errorMessage=errorMessage.concat("\n Min can not be less than 0.");
        }
        if(price < 0){
            validated = false;
            errorMessage=errorMessage.concat("\n Price must be a positive number.");
        }
        if(Objects.equals(name, "")){
            validated = false;
            errorMessage=errorMessage.concat("\n Name field must not be empty.");
        }
        if (specialInt<0){
            validated = false;
            errorMessage=errorMessage.concat("\n In house part must have an ID value number");
        }


        return validated;
    }

    /**
     * Handles the saving functionality when a user presses the save button.
     * If the inputs are valid, the Part is added to the Inventory.
     * @param actionEvent JavaFX action event
     * @throws IOException
     */
    @FXML
    private void handleSave(ActionEvent actionEvent) throws IOException {

        String productName = fieldName.getText();
        String productStock = fieldStock.getText();
        String productPrice = fieldPrice.getText();
        String productMin = fieldMin.getText();
        String productMax = fieldMax.getText();

        try {
            if(validate(productName,productPrice, productStock, productMin, productMax)){
                String name = productName;
                int stock = Integer.parseInt(productStock);
                double price = Double.parseDouble(productPrice);
                int min = Integer.parseInt(productMin);
                int max = Integer.parseInt(productMax);

                newProduct.setId(productId);
                newProduct.setName(name);
                newProduct.setStock(stock);
                newProduct.setPrice(price);
                newProduct.setMin(min);
                newProduct.setMax(max);

                Inventory.addProduct(newProduct);
                mainScreen(actionEvent);
            }
            else{
                Alert alert = new Alert(Alert.AlertType.ERROR);
                alert.setTitle("Error");
                alert.setHeaderText("Error Adding Product");
                alert.setContentText(errorMessage);
                alert.showAndWait();
            }
        }
        catch(NumberFormatException exception) {
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setTitle("Error");
            alert.setHeaderText("Error Adding Product");
            alert.setContentText("An error has occurred");
            alert.showAndWait();
        }
    }

    /**
     * Handles the canceling functionality when a user presses the cancel button.
     * It will return the user the Main screen if the user confirms cancellation
     * @param actionEvent JavaFX action event
     * @throws IOException
     */
    @FXML
    private void handleCancel(ActionEvent actionEvent) throws IOException {
        Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
        alert.initModality(Modality.NONE);
        alert.setTitle("Cancel Add Part Confirmation");
        alert.setHeaderText("Confirm Cancellation");
        alert.setContentText("Are you sure you want to cancel adding this product?");
        Optional<ButtonType> result = alert.showAndWait();

        if (result.get() == ButtonType.OK) {mainScreen(actionEvent);}
    }

    /**
     * Handles the remove associated part functionality when a user presses the remove button.
     * It will remove the associated part if the user confirms removal
     * @param actionEvent JavaFX action event
     * @throws IOException
     */
    @FXML
    private void handleRemove(ActionEvent actionEvent) throws IOException {
        Part selectedPart = tableAssociatedPart.getSelectionModel().getSelectedItem();
        if (selectedPart == null){
            Alert alert = new Alert((Alert.AlertType.WARNING));
            alert.initModality(Modality.NONE);
            alert.setTitle("Warning");
            alert.setHeaderText("No Part Selected");
            alert.setContentText("You must select a part.");
            alert.show();
        } else{
            Alert alert = new Alert((Alert.AlertType.CONFIRMATION));
            alert.initModality(Modality.NONE);
            alert.setTitle("Remove Associated Part Confirmation");
            alert.setHeaderText("Confirm Remove");
            alert.setContentText("Are you sure you want to remove the associated part?");
            Optional<ButtonType> result = alert.showAndWait();
            if(result.get() == ButtonType.OK) {
                newProduct.deleteAssociatedPart(selectedPart);
            }
        }
    }

    /**
     * Handles the search part functionality when the user enters a search query.
     * It will populate the table with the search results or bring up a dialog box if no searches found
     * @param actionEvent JavaFX action event
     * @throws IOException
     */
    @FXML
    private void handleSearch(ActionEvent actionEvent) throws IOException{
        String search = fieldSearch.getText();
        ObservableList<Part> searchResults = FXCollections.observableArrayList();
        int partId = -1;
        Boolean isInt = true;

        try{partId = Integer.parseInt(search);}
        catch (NumberFormatException e){isInt = false;}

        if(isInt){
            Part foundPart = Inventory.lookupPart(partId);
            searchResults.add(foundPart);
        }

        ObservableList<Part> foundParts = Inventory.lookupPart(search);
        for(int i =0; i<foundParts.size(); i++){searchResults.add(foundParts.get(i));}

        if(searchResults.size()==0){
            Alert alert = new Alert(Alert.AlertType.INFORMATION);
            alert.setTitle("Not Found");
            alert.setHeaderText("No Matching Results");
            alert.setContentText("No parts found matching the search query");
            alert.showAndWait();
        }else{
            tableInventoryPart.setItems(searchResults);
        }


    }

    /**
     * Handles the add associated part functionality when a user presses the add button.
     * It will add the associated part if the user has selected a part
     * @param actionEvent JavaFX action event
     * @throws IOException
     */
    @FXML
    private void handleAdd(ActionEvent actionEvent) throws IOException {
        Part selectedPart = tableInventoryPart.getSelectionModel().getSelectedItem();
        if (selectedPart == null){
            Alert alert = new Alert((Alert.AlertType.WARNING));
            alert.initModality(Modality.NONE);
            alert.setTitle("Warning");
            alert.setHeaderText("No Part Selected");
            alert.setContentText("You must select a part.");
            alert.show();
        } else{
            newProduct.addAssociatedPart(selectedPart);
        }
    }
    /**
     * Handles setting up all the tables and populates them with the data.
     * This function also maps all the columns with properties from the Part class.
     */
    public void mapTables(){
        columnInventoryPartId.setCellValueFactory(new PropertyValueFactory<>("id"));
        columnInventoryPartName.setCellValueFactory(new PropertyValueFactory<>("name"));
        columnInventoryPartStock.setCellValueFactory(new PropertyValueFactory<>("stock"));
        columnInventoryPartPrice.setCellValueFactory(new PropertyValueFactory<>("price"));

        columnAssociatedPartId.setCellValueFactory(new PropertyValueFactory<>("id"));
        columnAssociatedPartName.setCellValueFactory(new PropertyValueFactory<>("name"));
        columnAssociatedPartStock.setCellValueFactory(new PropertyValueFactory<>("stock"));
        columnAssociatedPartPrice.setCellValueFactory(new PropertyValueFactory<>("price"));

        tableInventoryPart.setItems(Inventory.getAllParts());
        tableAssociatedPart.setItems(newProduct.getAllAssociatedParts());
    }


    /**
     * Initializes the FXML Screen, creates a newProduct object, & generates a productId.
     * @param url parameter for the FXML Screen
     * @param rb parameter for the FXML Screen
     */
    @Override
    public void initialize(URL url, ResourceBundle rb) {
        productId = Inventory.getAllProducts().size();
        fieldId.setText("Auto-Gen: " + productId);
        newProduct = new Product(productId, "", 0.0, 0, 0, 0);
        mapTables();
    }
}